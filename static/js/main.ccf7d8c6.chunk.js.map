{"version":3,"sources":["pages/NotFound.tsx","components/Carousel.tsx","pages/Home.tsx","pages/About.tsx","components/Navbar.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["NotFound","id","className","Component","Carousel","props","domId","Math","floor","random","carouselTarget","data-ride","images","length","map","_","i","data-target","data-slide-to","image","key","src","alt","href","role","data-slide","aria-hidden","Home","useState","selection","setSelection","setCourseChoice","course","recipe","courses","x","type","recipes","name","onClick","bind","Object","entries","About","Navbar","data-toggle","aria-controls","aria-expanded","aria-label","to","App","exact","path","component","Boolean","window","location","hostname","match","jQuery","$","Popper","require","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+oHAaeA,E,iLATX,OACE,yBAAKC,GAAG,YAAYC,UAAU,aAC5B,mCACA,2D,GALeC,a,+BCmERC,EA/DE,SAACC,GAChB,IAAMC,EAAK,sBAAkBC,KAAKC,MAAsB,IAAhBD,KAAKE,WACvCC,EAAiB,IAAMJ,EAC7B,OACE,yBAAKL,GAAIK,EAAOJ,UAAU,iBAAiBS,YAAU,YAClDN,EAAMO,OAAOC,OAAS,GACrB,wBAAIX,UAAU,uBACXG,EAAMO,OAAOE,KAAI,SAACC,EAAGC,GAAJ,OAChB,wBACEC,cAAaP,EACbQ,gBAAeF,EACfd,UAAS,UAAW,IAANc,EAAU,SAAW,UAK3C,yBAAKd,UAAU,kBACZG,EAAMO,OAAOE,KAAI,SAACK,EAAOH,GAAR,OAChB,yBACEI,IAAKD,EACLjB,UAAS,wBAAyB,IAANc,EAAU,SAAW,KAEjD,yBACEd,UAAU,4BACVmB,IAAKF,EACLG,IAAKH,QAIVd,EAAMO,OAAOC,OAAS,GACrB,oCACE,uBACEX,UAAU,wBACVqB,KAAMb,EACNc,KAAK,SACLC,aAAW,QAEX,0BACEvB,UAAU,6BACVwB,cAAY,SAEd,0BAAMxB,UAAU,WAAhB,aAGF,uBACEA,UAAU,wBACVqB,KAAMb,EACNc,KAAK,SACLC,aAAW,QAEX,0BACEvB,UAAU,6BACVwB,cAAY,SAEd,0BAAMxB,UAAU,WAAhB,aCGCyB,EA7CF,SAACtB,GAAuB,IAAD,EACAuB,mBAAmB,IADnB,mBAC3BC,EAD2B,KAChBC,EADgB,KAG5BC,EAAkB,SAACC,EAAgBC,GACvCH,EAAa,eAAKD,EAAN,eAAkBG,EAASC,MAGzC,OACE,yBAAK/B,UAAU,mBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,SACZgC,EAAQpB,KAAI,SAAAqB,GAAC,OACZ,yBAAKf,IAAKe,EAAEC,KAAMlC,UAAU,OAC1B,yBAAKA,UAAU,UACb,4BAAKiC,EAAEC,MACP,yBAAKlC,UAAU,OACZiC,EAAEE,QAAQvB,KAAI,SAAAmB,GAAM,OACnB,yBAAKb,IAAKa,EAAOK,KAAMpC,UAAU,OAC/B,uBAAGqC,QAASR,EAAgBS,KAAK,KAAML,EAAEC,KAAMH,IAC5CA,EAAOK,MAEV,kBAAC,EAAD,CAAU1B,OAAQqB,EAAOrB,oBAQvC,yBAAKV,UAAU,SACb,0CACCuC,OAAOC,QAAQb,GAAWf,KAAI,mCAAEkB,EAAF,KAAUC,EAAV,YAC7B,yBAAKb,IAAKa,EAAOK,MACf,sCACWN,EADX,aAC6BC,EAAOK,MAEpC,kBAAC,EAAD,CAAU1B,OAAQqB,EAAOrB,iBC3CxB+B,EATD,WACZ,OACE,yBAAKzC,UAAU,aACb,qCACA,yDCgCS0C,EAnCA,WACb,OACE,yBAAK1C,UAAU,+CACb,4BACEA,UAAU,iBACVkC,KAAK,SACLS,cAAY,WACZ5B,cAAY,uBACZ6B,gBAAc,sBACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAM9C,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BD,GAAG,uBAC3C,kBAAC,IAAD,CAAMC,UAAU,eAAe+C,GAAG,KAAlC,qBAGA,wBAAI/C,UAAU,mCACZ,wBAAIA,UAAU,mBACZ,kBAAC,IAAD,CAAMA,UAAU,WAAW+C,GAAG,KAA9B,OACM,0BAAM/C,UAAU,WAAhB,eAGR,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMA,UAAU,WAAW+C,GAAG,UAA9B,cCJGC,EAhBH,WACV,OACE,kBAAC,IAAD,KACE,yBAAKjD,GAAG,eACN,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOkD,OAAK,EAACC,KAAK,IAAIC,UAAW1B,IACjC,kBAAC,IAAD,CAAOyB,KAAK,SAASC,UAAWV,IAEhC,kBAAC,IAAD,CAAOU,UAAWrD,QCLRsD,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,2DCCNH,OAAOI,OAASC,IAEhBL,OAAOK,EAAIA,IAEXL,OAAOM,OAASA,UAChBC,EAAQ,IAGRC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8G3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ccf7d8c6.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass NotFound extends Component {\n  render() {\n    return (\n      <div id=\"not-found\" className=\"container\">\n        <h1>404</h1>\n        <p>Page could not be found</p>\n      </div>\n    )\n  }\n}\n\nexport default NotFound\n","import React from \"react\";\n\nexport interface ICarouselProps {\n  images: string[];\n}\n\nconst Carousel = (props: ICarouselProps) => {\n  const domId = `carousel-id-${Math.floor(Math.random() * 1000)}`;\n  const carouselTarget = \"#\" + domId;\n  return (\n    <div id={domId} className=\"carousel slide\" data-ride=\"carousel\">\n      {props.images.length > 1 && (\n        <ol className=\"carousel-indicators\">\n          {props.images.map((_, i) => (\n            <li\n              data-target={carouselTarget}\n              data-slide-to={i}\n              className={`${i === 0 ? \"active\" : \"\"}`}\n            ></li>\n          ))}\n        </ol>\n      )}\n      <div className=\"carousel-inner\">\n        {props.images.map((image, i) => (\n          <div\n            key={image}\n            className={`carousel-item ${i === 0 ? \"active\" : \"\"}`}\n          >\n            <img\n              className=\"d-block w-100 image-fluid\"\n              src={image}\n              alt={image}\n            />\n          </div>\n        ))}\n        {props.images.length > 1 && (\n          <>\n            <a\n              className=\"carousel-control-prev\"\n              href={carouselTarget}\n              role=\"button\"\n              data-slide=\"prev\"\n            >\n              <span\n                className=\"carousel-control-prev-icon\"\n                aria-hidden=\"true\"\n              ></span>\n              <span className=\"sr-only\">Previous</span>\n            </a>\n\n            <a\n              className=\"carousel-control-next\"\n              href={carouselTarget}\n              role=\"button\"\n              data-slide=\"next\"\n            >\n              <span\n                className=\"carousel-control-next-icon\"\n                aria-hidden=\"true\"\n              ></span>\n              <span className=\"sr-only\">Next</span>\n            </a>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default Carousel;\n","import React, { useState } from \"react\";\n// import { Map, TileLayer, Polygon, Marker, Popup } from \"react-leaflet\";\n// import { brisbaneCoords } from \"../constants\";\nimport courses from \"../data/recipes.json\";\nimport Carousel from \"../components/Carousel\";\n\ninterface IHomeProps {}\n\ninterface IChoices {\n  [key: string]: IRecipe;\n}\n\ninterface IRecipe {\n  name: string;\n  link: string;\n  images: string[];\n}\n\nconst Home = (props: IHomeProps) => {\n  const [selection, setSelection] = useState<IChoices>({});\n\n  const setCourseChoice = (course: string, recipe: IRecipe) => {\n    setSelection({ ...selection, [course]: recipe });\n  };\n\n  return (\n    <div className=\"container-fluid\">\n      <div className=\"row\">\n        <div className=\"col-8\">\n          {courses.map(x => (\n            <div key={x.type} className=\"row\">\n              <div className=\"col-12\">\n                <h2>{x.type}</h2>\n                <div className=\"row\">\n                  {x.recipes.map(recipe => (\n                    <div key={recipe.name} className=\"col\">\n                      <p onClick={setCourseChoice.bind(null, x.type, recipe)}>\n                        {recipe.name}\n                      </p>\n                      <Carousel images={recipe.images} />\n                    </div>\n                  ))}\n                </div>\n              </div>\n            </div>\n          ))}\n        </div>\n        <div className=\"col-4\">\n          <h2>Your order</h2>\n          {Object.entries(selection).map(([course, recipe]) => (\n            <div key={recipe.name}>\n              <p>\n                Course: {course}, choice: {recipe.name}\n              </p>\n              <Carousel images={recipe.images} />\n            </div>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\n\nconst About = () => {\n  return (\n    <div className=\"container\">\n      <h1>About</h1>\n      <p>Plan your fancy night in</p>\n    </div>\n  );\n};\n\nexport default About;\n","import React from \"react\";\nimport { Link } from \"react-router-dom\";\n\nconst Navbar = () => {\n  return (\n    <nav className=\"navbar navbar-expand-sm navbar-dark bg-dark\">\n      <button\n        className=\"navbar-toggler\"\n        type=\"button\"\n        data-toggle=\"collapse\"\n        data-target=\"#navbarTogglerDemo01\"\n        aria-controls=\"navbarTogglerDemo01\"\n        aria-expanded=\"false\"\n        aria-label=\"Toggle navigation\"\n      >\n        <span className=\"navbar-toggler-icon\"></span>\n      </button>\n      <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo01\">\n        <Link className=\"navbar-brand\" to=\"/\">\n          Recipe Repertoire\n        </Link>\n        <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n          <li className=\"nav-item active\">\n            <Link className=\"nav-link\" to=\"/\">\n              Home<span className=\"sr-only\">(current)</span>\n            </Link>\n          </li>\n          <li className=\"nav-item\">\n            <Link className=\"nav-link\" to=\"/about\">\n              About\n            </Link>\n          </li>\n        </ul>\n      </div>\n    </nav>\n  );\n};\n\nexport default Navbar;\n","import React from \"react\";\nimport { HashRouter as Router, Route, Switch } from \"react-router-dom\";\n\nimport NotFound from \"./pages/NotFound\";\nimport Home from \"./pages/Home\";\nimport About from \"./pages/About\";\nimport Navbar from \"./components/Navbar\";\n\nconst App = () => {\n  return (\n    <Router>\n      <div id=\"application\">\n        <Navbar />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route path=\"/about\" component={About} />\n\n          <Route component={NotFound} />\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\n// import config from './config'\nimport $ from \"jquery\";\nimport Popper from \"popper.js\";\nimport \"@fortawesome/fontawesome-free/css/fontawesome.css\";\nimport \"@fortawesome/fontawesome-free/css/regular.css\";\nimport \"@fortawesome/fontawesome-free/css/solid.css\";\nimport \"bootstrap/dist/css/bootstrap.css\";\nimport \"./css/base.scss\";\n\n/*\n----------------------------------------------------------------------\n  Shim to provide dependent plugins without ejecting create-react-app\n*/\n// @ts-ignore\nwindow.jQuery = $;\n// @ts-ignore\nwindow.$ = $;\n// @ts-ignore\nwindow.Popper = Popper;\nrequire(\"bootstrap\");\n/* ------------------------------------------------------------------- */\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}